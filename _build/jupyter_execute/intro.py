# Intro

## Комментирование

Комментарии - это фрагменты текста, которые находятся в коде, но игнорируются интерпретатором Python при выполнении кода. Можно использовать комментарии для описания кода, чтобы вы и другие разработчики могли быстро понять, что делает код или почему код написан определенным образом. Чтобы написать комментарий на Python, просто добавьте решетку (#) перед текстом комментария:

# Это комментарий в отдельной строке

Интерпретатор Python игнорирует текст после решетки и до конца строки. Вы также можете добавить в свой код встроенные комментарии. Другими словами, вы можете объединить выражение или оператор Python с комментарием в одной строке, учитывая, что комментарий занимает последнюю часть строки:

var = "Привет, мир!" # Это встроенный комментарий

Комментарии должны быть краткими и по существу. PEP 8 рекомендует оставлять комментарии длиной не более 72 символов. Если ваш комментарий приближается к этой длине или превышает ее, вы можете разместить его на нескольких строках:

# Это длинный комментарий, требующий
# две строки для завершения.

Если вам нужно больше места для данного комментария, вы можете использовать несколько строк с решеткой на каждой.

Строки документации (**docstrings**) служат той же цели, что и обычные комментарии, поскольку они предназначены для объяснения кода. Однако они более конкретны и имеют другой синтаксис. Они создаются путем помещения многострочной строки, содержащей объяснение функции, под ее первой строкой:

def shout(word):
    """
    Печатает слово с 
    восклицательным знаком в конце
    """
    print(word + "!")

shout("spam")

## Переменные

В Питоне переменные - это имена, прикрепленные к определенному объекту. Они содержат ссылку или указатель на адрес памяти, по которому хранится объект. После того, как переменной назначен объект, вы можете получить доступ к объекту, используя имя переменной.
Вам необходимо заранее определить свои переменные. Вот синтаксис:

variable_name = variable_value

Вы должны использовать схему именования, которая сделает ваши переменные интуитивно понятными и удобно читаемыми. Имя переменной должно указывать на присвоенные ей значения.

Иногда программисты используют короткие имена переменных, например x и y. Это совершенно подходящие имена в контексте математики, алгебры и так далее. В других контекстах вам следует избегать одно символьных имен и использовать что-то более наглядное. Таким образом, другие разработчики могут сделать обоснованное предположение о том, что содержат ваши переменные. При написании программ думайте о других, а также о себе в будущем.

Вот несколько примеров допустимых и недопустимых имен переменных в Python:

numbers = [1, 2, 3, 4, 5]
numbers

first_num = 1
first_num

1rst_num = 1

Имена переменных могут быть любой длины и состоять из прописных и строчных букв (A-Z, a-z), цифр (0-9), а также символа подчеркивания (_). В общем, имена переменных должны быть буквенно-цифровыми, но учтите, что хотя имена переменных могут содержать цифры, их первый символ не может быть цифрой.

```{admonition} Примечание
Соглашение об именах lower_case_with_underscores, также известное как <b>snake_case</b>, обычно используется в Python.
```

## Ключевые слова

Как и в любом другом языке программирования, в Python есть набор специальных слов, которые являются частью его синтаксиса. Эти слова известны как ключевые слова. Чтобы получить полный список ключевых слов, доступных в вашей текущей установке Python, вы можете запустить следующий код в консоли:

help("keywords")

Каждое из этих ключевых слов играет роль в синтаксисе Python. Это зарезервированные слова, которые имеют определенные значения и цели в языке, поэтому вы не должны использовать их ни для чего, кроме этих конкретных целей. Например, вы не должны использовать их в качестве имен переменных в своем коде.

Есть еще один способ получить доступ ко всему списку ключевых слов Python:

import keyword
keyword.kwlist

**keyword** предоставляет набор функций, которые позволяют вам определить, является ли данная строка ключевым словом. Например, keyword.kwlist содержит список всех текущих ключевых слов в Python. Это удобно, когда вам нужно программно манипулировать ключевыми словами в ваших программах Python.

## Ввод и вывод в консоль

### Чтение ввода с клавиатуры

Программам часто требуется получать данные от пользователя, обычно путем ввода с клавиатуры. Самый простой способ сделать это в Python - использовать `input()`.

```Python
input([<prompt>])  # Читает строку ввода с клавиатуры.
```

`input()` приостанавливает выполнение программы, чтобы пользователь мог ввести строку с клавиатуры. Как только пользователь нажимает клавишу Enter, все набранные символы считываются и возвращаются в виде строки:

s = input()
s

Обратите внимание, что новая строка, генерируемая, когда пользователь нажимает клавишу Enter, не включается в возвращаемую строку.

Если вы включите необязательный аргумент `<prompt>`, `input()` отобразит его как приглашение пользователю перед приостановкой чтения ввода:

name = input('What is your name? ')
name

`input()` всегда возвращает строку. Если вам нужен числовой тип, вам нужно преобразовать строку в соответствующий тип с помощью встроенных функций `int()`, `float()` или `complex()`:

n = input('Enter a number: ')
n + 100

n = int(input('Enter a number: '))
n + 100

В приведенном выше примере выражение n + 100 в строке 2 недопустимо, потому что n - строка, а 100 - целое число. Строка 3 преобразует n в целое число, поэтому операция в строке 4 завершается успешно.

### Запись вывода в консоль

Помимо получения данных от пользователя, программе также обычно необходимо предоставлять данные обратно пользователю. Можно отображать данные в консоли в Python с помощью `print()`.

Чтобы вывести объекты в консоли, передайте их как список аргументов, разделенных запятыми, в `print()`.

```Python
print (<obj>, ..., <obj>)  # Отображает строковое представление каждого <obj> в консоли.
```

По умолчанию `print()` разделяет каждый объект одним пробелом и добавляет новую строку в конец вывода:

fname = 'Winston'
lname = 'Smith'
print('Name:', fname, lname)

В качестве аргумента функции `print()` можно указать любой тип объекта. Если объект не является строкой, то `print()` преобразует его в соответствующее строковое представление, отображающее его:

a = [1, 2, 3]
type(a)

b = -12
type(b)

d = {'foo': 1, 'bar': 2}
type(d)

type(len)

print(a, b, d, len)

Как видите, даже сложные типы, такие как списки, словари и функции, могут отображаться на консоли с помощью `print()`.

### Аргументы print()

`print()` принимает несколько дополнительных аргументов, которые обеспечивают контроль над форматом вывода. Каждый из них представляет собой особый тип аргумента, называемый аргументом ключевого слова.

* Аргументы ключевого слова имеют вид `<keyword>=<value>`.
* Любые аргументы ключевого слова, передаваемые в `print()`, должны идти в конце после списка отображаемых объектов.

### Аргумент sep=

Добавление аргумента `sep = <str>` приводит к тому, что объекты разделяются строкой `<str>` вместо одиночного пробела по умолчанию:

print('foo', 42, 'bar')

print('foo', 42, 'bar', sep='/')

print('foo', 42, 'bar', sep='...')

d = {'foo': 1, 'bar': 2, 'baz': 3}
for k, v in d.items():
    print(k, v, sep=' -> ')

Чтобы сжимать объекты вместе без пробелов между ними, укажите `sep = ''`:

print('foo', 42, 'bar', sep='')

### Аргумент end=

Аргумент `end = <str>` заставляет вывод завершаться `<str>` вместо новой строки по умолчанию:

print('foo', end='/')
print(42, end='/')
print('bar')


```{toctree}
:hidden:
:titlesonly:


data_types
control_flow
functions
oop
```
